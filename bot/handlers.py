import os
import html
from loguru import logger
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode

from . import network
from . import storage

handlers_router = Router()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logger.bind(module="bot_handlers")


def format_network_info() -> str:
    logger.debug("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    ssid = network.get_wifi_ssid()
    ip, gw = network.parse_ipconfig_for_gateway_and_ip()
    local_ip = network.get_local_ip()

    lines = ["<b>–°–µ—Ç–µ–≤–æ–π –æ—Ç—á—ë—Ç</b>", ""]
    if ssid:
        lines.append(f"üî∏ <b>–ò–º—è —Å–µ—Ç–∏ (SSID):</b> <code>{html.escape(ssid)}</code>")
        logger.debug(f"SSID –Ω–∞–π–¥–µ–Ω: {ssid}")
    else:
        lines.append("üî∏ <b>–ò–º—è —Å–µ—Ç–∏ (SSID):</b> <i>–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ / –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>")
        logger.warning("SSID –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if ip:
        lines.append(f"üîπ <b>–õ–æ–∫–∞–ª—å–Ω—ã–π IP (adapter):</b> <code>{html.escape(ip)}</code>")
        logger.debug(f"IP –∞–¥–∞–ø—Ç–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω: {ip}")
    else:
        lines.append("üîπ <b>–õ–æ–∫–∞–ª—å–Ω—ã–π IP (adapter):</b> <i>–ù–µ –Ω–∞–π–¥–µ–Ω</i>")
        logger.warning("IP –∞–¥–∞–ø—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    lines.append(f"üîπ <b>–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π IP (–º–µ—Ç–æ–¥ UDP):</b> <code>{html.escape(local_ip)}</code>")
    logger.debug(f"–õ–æ–∫–∞–ª—å–Ω—ã–π IP (UDP): {local_ip}")

    if gw:
        lines.append(f"üî∏ <b>–®–ª—é–∑ (Default Gateway):</b> <code>{html.escape(gw)}</code>")
        logger.debug(f"–®–ª—é–∑ –Ω–∞–π–¥–µ–Ω: {gw}")
    else:
        lines.append("üî∏ <b>–®–ª—é–∑ (Default Gateway):</b> <i>–ù–µ –Ω–∞–π–¥–µ–Ω</i>")
        logger.warning("–®–ª—é–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    lines.append("")
    lines.append("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/wifiprofiles</code>")
    lines.append("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ñ–∏–ª—è: <code>/wifipass –∏–º—è_–ø—Ä–æ—Ñ–∏–ª—è</code>")
    lines.append("–í–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ.")
    
    logger.info("–°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞")
    return "\n".join(lines)


# States –¥–ª—è FSM
class FillStates(StatesGroup):
    name = State()
    address = State()
    password = State()
    note = State()


async def start_command(message: Message) -> None:
    user = message.from_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")

    text = (
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.</b>\n\n"
        "–Ø —É–º–µ—é –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥. –ù–∏–∂–µ –∫—Ä–∞—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ —è –ø—Ä–∏–Ω–∏–º–∞—é.\n\n"
        "üîπ <b>/start</b> ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏ (–≤—ã —É–∂–µ –∑–¥–µ—Å—å).\n\n"
        "üîπ <b>/find_net –Ω–æ–º–µ—Ä_–ø–∞–≤–∏–ª—å–æ–Ω–∞</b> ‚Äî –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞–≤–∏–ª—å–æ–Ω–∞.\n"
        "   –ü—Ä–∏–º–µ—Ä: <code>/find_net 122</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–∞–≤–∏–ª—å–æ–Ω–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
        "üîπ <b>/add_data</b> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "   <code>{\"pavilion\": \"122\", \"name\": \"–ü—Ä–æ–¥–∞–≤–µ—Ü\", \"note\": \"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\"}</code>\n"
        "   –ü–æ–ª—è –Ω–µ—Å—Ç—Ä–æ–≥–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã ‚Äî –≥–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON-–æ–±—ä–µ–∫—Ç–æ–º.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/help</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å."
    )
    await message.answer(text, parse_mode=ParseMode.HTML)
    logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


async def network_command(message: Message) -> None:
    user = message.from_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /network –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    text = format_network_info()
    await message.answer(text, parse_mode=ParseMode.HTML)
    logger.debug("–°–µ—Ç–µ–≤–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


async def wifiprofiles_command(message: Message) -> None:
    user = message.from_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /wifiprofiles –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    profiles = network.list_wifi_profiles()
    if not profiles:
        logger.warning("WiFi –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await message.answer("<i>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>", parse_mode=ParseMode.HTML)
        return

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(profiles)} WiFi –ø—Ä–æ—Ñ–∏–ª–µ–π")
    lines = ["<b>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–∏:</b>"]
    for p in profiles:
        lines.append(f"‚Ä¢ <code>{html.escape(p)}</code>")
    lines.append("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/wifipass –∏–º—è_–ø—Ä–æ—Ñ–∏–ª—è</code>")
    
    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)
    logger.debug("–°–ø–∏—Å–æ–∫ WiFi –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


async def wifipass_command(message: Message, command: CommandObject) -> None:
    user = message.from_user
    args = command.args
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /wifipass –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args}")
    
    if not args:
        logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è /wifipass")
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/wifipass –∏–º—è_–ø—Ä–æ—Ñ–∏–ª—è</code>", parse_mode=ParseMode.HTML)
        return
    
    profile = args.strip()
    logger.debug(f"–ü–æ–∏—Å–∫ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: {profile}")
    
    pwd = network.get_wifi_password(profile)
    if pwd:
        logger.info(f"–ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile}' –Ω–∞–π–¥–µ–Ω")
        await message.answer(f"<b>–ü–∞—Ä–æ–ª—å –¥–ª—è</b> <code>{html.escape(profile)}</code>:\n<code>{html.escape(pwd)}</code>", parse_mode=ParseMode.HTML)
    else:
        logger.warning(f"–ü–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è '{profile}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è <code>{html.escape(profile)}</code> (–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∞).", parse_mode=ParseMode.HTML)


async def wifipass_all_command(message: Message) -> None:
    user = message.from_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /wifipass_all –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    profiles = network.list_wifi_profiles()
    if not profiles:
        logger.warning("WiFi –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è /wifipass_all")
        await message.answer("<i>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>", parse_mode=ParseMode.HTML)
        return
    
    logger.info(f"–ü–æ–∏—Å–∫ –ø–∞—Ä–æ–ª–µ–π –¥–ª—è {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π")
    lines = ["<b>–ü–∞—Ä–æ–ª–∏ Wi‚ÄëFi (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã):</b>"]
    
    for p in profiles:
        pwd = network.get_wifi_password(p) or "<i>–ù–µ –Ω–∞–π–¥–µ–Ω / –∑–∞–∫—Ä—ã—Ç</i>"
        lines.append(f"‚Ä¢ <code>{html.escape(p)}</code>: <code>{html.escape(pwd)}</code>")
        if pwd and pwd != "<i>–ù–µ –Ω–∞–π–¥–µ–Ω / –∑–∞–∫—Ä—ã—Ç</i>":
            logger.debug(f"–ü–∞—Ä–æ–ª—å –¥–ª—è '{p}' –Ω–∞–π–¥–µ–Ω")
        else:
            logger.debug(f"–ü–∞—Ä–æ–ª—å –¥–ª—è '{p}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)
    logger.info("–í—Å–µ –ø–∞—Ä–æ–ª–∏ WiFi –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


async def fill_start(message: Message, state: FSMContext):
    user = message.from_user
    logger.info(f"–ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
    
    await message.answer("<b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ç–∏ (SSID) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", parse_mode=ParseMode.HTML)
    await state.set_state(FillStates.name)
    await state.update_data({})


async def fill_name(message: Message, state: FSMContext):
    user = message.from_user
    text = message.text.strip() if message.text else ""
    
    await state.update_data({'name': text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –∏–º—è: {text}")
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (IP) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", parse_mode=ParseMode.HTML)
    await state.set_state(FillStates.address)


async def fill_address(message: Message, state: FSMContext):
    user = message.from_user
    text = message.text.strip() if message.text else ""
    
    await state.update_data({'address': text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –∞–¥—Ä–µ—Å: {text}")
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip.", parse_mode=ParseMode.HTML)
    await state.set_state(FillStates.password)


async def fill_password(message: Message, state: FSMContext):
    user = message.from_user
    text = message.text.strip() if message.text else ""
    
    await state.update_data({'password': text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"})
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –ø–∞—Ä–æ–ª—å: {'*' * len(text) if text else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip.", parse_mode=ParseMode.HTML)
    await state.set_state(FillStates.note)


async def fill_note(message: Message, state: FSMContext):
    user = message.from_user
    text = message.text.strip() if message.text else ""
    
    data = await state.get_data()
    data['note'] = text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: {text}")
    storage.save_row(os.path.dirname(__file__), data)
    logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    await message.answer("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.", parse_mode=ParseMode.HTML)
    await state.clear()


async def skip_field(message: Message, state: FSMContext):
    user = message.from_user
    current_state = await state.get_state()
    data = await state.get_data()
    
    if current_state == FillStates.name.state:
        data['name'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –∏–º–µ–Ω–∏")
        await message.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (IP) –∏–ª–∏ /skip.", parse_mode=ParseMode.HTML)
        await state.set_state(FillStates.address)
        
    elif current_state == FillStates.address.state:
        data['address'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞")
        await message.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ /skip.", parse_mode=ParseMode.HTML)
        await state.set_state(FillStates.password)
        
    elif current_state == FillStates.password.state:
        data['password'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è")
        await message.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ /skip.", parse_mode=ParseMode.HTML)
        await state.set_state(FillStates.note)
        
    elif current_state == FillStates.note.state:
        data['note'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        storage.save_row(os.path.dirname(__file__), data)
        logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await message.answer("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.", parse_mode=ParseMode.HTML)
        await state.clear()
    
    await state.update_data(data)


async def cancel_fill(message: Message, state: FSMContext):
    user = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
    
    await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", parse_mode=ParseMode.HTML)
    await state.clear()


async def showtable_command(message: Message):
    user = message.from_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /showtable –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    rows = storage.load_table(os.path.dirname(__file__))
    if not rows:
        logger.warning("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
        await message.answer("<i>–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.</i>", parse_mode=ParseMode.HTML)
        return
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    lines = ["<b>–¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π:</b>"]
    for i, r in enumerate(rows, 1):
        lines.append(f"{i}. SSID: <code>{html.escape(r.get('name','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code> | IP: <code>{html.escape(r.get('address','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code> | –ü–∞—Ä–æ–ª—å: <code>{html.escape(r.get('password','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code> | –ü—Ä–∏–º: <code>{html.escape(r.get('note','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code>")
    
    await message.answer("\n".join(lines), parse_mode=ParseMode.HTML)
    logger.debug("–¢–∞–±–ª–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")


def setup_handlers(dp: Dispatcher) -> None:
    logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ aiogram")
    
    # Basic commands
    dp.message.register(start_command, Command("start"))
    dp.message.register(network_command, Command("network"))
    dp.message.register(wifiprofiles_command, Command("wifiprofiles"))
    dp.message.register(wifipass_command, Command("wifipass"))
    dp.message.register(wifipass_all_command, Command("wifipass_all"))
    dp.message.register(showtable_command, Command("showtable"))
    
    # FSM handlers
    dp.message.register(fill_start, Command("fill"))
    dp.message.register(cancel_fill, Command("cancel"))
    dp.message.register(skip_field, Command("skip"))
    
    dp.message.register(fill_name, FillStates.name, F.text)
    dp.message.register(fill_address, FillStates.address, F.text)
    dp.message.register(fill_password, FillStates.password, F.text)
    dp.message.register(fill_note, FillStates.note, F.text)
    
    logger.success("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ aiogram –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")


def build_application(token: str) -> tuple[Bot, Dispatcher]:
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ aiogram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
    
    bot = Bot(token=token)
    dp = Dispatcher()
    
    setup_handlers(dp)
    
    logger.success("Aiogram –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    return bot, dp