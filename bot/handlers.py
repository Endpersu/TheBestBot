import os
import html
import logging
from telegram import Update
from telegram.ext import (
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
    Application,
)

from . import network
from . import storage

LOG = logging.getLogger(__name__)


def format_network_info() -> str:
    ssid = network.get_wifi_ssid()
    ip, gw = network.parse_ipconfig_for_gateway_and_ip()
    local_ip = network.get_local_ip()

    lines = ["<b>–°–µ—Ç–µ–≤–æ–π –æ—Ç—á—ë—Ç</b>", ""]
    if ssid:
        lines.append(f"üî∏ <b>–ò–º—è —Å–µ—Ç–∏ (SSID):</b> <code>{html.escape(ssid)}</code>")
    else:
        lines.append("üî∏ <b>–ò–º—è —Å–µ—Ç–∏ (SSID):</b> <i>–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ / –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</i>")

    if ip:
        lines.append(f"üîπ <b>–õ–æ–∫–∞–ª—å–Ω—ã–π IP (adapter):</b> <code>{html.escape(ip)}</code>")
    else:
        lines.append("üîπ <b>–õ–æ–∫–∞–ª—å–Ω—ã–π IP (adapter):</b> <i>–ù–µ –Ω–∞–π–¥–µ–Ω</i>")

    lines.append(f"üîπ <b>–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π IP (–º–µ—Ç–æ–¥ UDP):</b> <code>{html.escape(local_ip)}</code>")

    if gw:
        lines.append(f"üî∏ <b>–®–ª—é–∑ (Default Gateway):</b> <code>{html.escape(gw)}</code>")
    else:
        lines.append("üî∏ <b>–®–ª—é–∑ (Default Gateway):</b> <i>–ù–µ –Ω–∞–π–¥–µ–Ω</i>")

    lines.append("")
    lines.append("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/wifiprofiles</code>")
    lines.append("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ñ–∏–ª—è: <code>/wifipass –∏–º—è_–ø—Ä–æ—Ñ–∏–ª—è</code>")
    lines.append("–í–Ω–∏–º–∞–Ω–∏–µ: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ.")
    return "\n".join(lines)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "<b>–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ —Å–µ—Ç–∏.</b>\n\n"
        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π IP, –∏–º—è Wi‚ÄëFi —Å–µ—Ç–∏, —à–ª—é–∑ –∏ –ø–æ–º–æ—á—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ Wi‚ÄëFi –ø–∞—Ä–æ–ª–∏.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã: <code>/network</code>, <code>/wifiprofiles</code>, <code>/wifipass</code>."
    )
    await update.message.reply_html(text)


async def network_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = format_network_info()
    await update.message.reply_html(text)


async def wifiprofiles_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    profiles = network.list_wifi_profiles()
    if not profiles:
        await update.message.reply_html("<i>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>")
        return
    lines = ["<b>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–∏:</b>"]
    for p in profiles:
        lines.append(f"‚Ä¢ <code>{html.escape(p)}</code>")
    lines.append("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/wifipass –∏–º—è_–ø—Ä–æ—Ñ–∏–ª—è</code>")
    await update.message.reply_html("\n".join(lines))


async def wifipass_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    args = context.args
    if not args:
        await update.message.reply_html("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/wifipass –∏–º—è_–ø—Ä–æ—Ñ–∏–ª—è</code>")
        return
    profile = " ".join(args)
    pwd = network.get_wifi_password(profile)
    if pwd:
        await update.message.reply_html(f"<b>–ü–∞—Ä–æ–ª—å –¥–ª—è</b> <code>{html.escape(profile)}</code>:\n<code>{html.escape(pwd)}</code>")
    else:
        await update.message.reply_html(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è <code>{html.escape(profile)}</code> (–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∞).")


async def wifipass_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    profiles = network.list_wifi_profiles()
    if not profiles:
        await update.message.reply_html("<i>–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö Wi‚ÄëFi –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</i>")
        return
    lines = ["<b>–ü–∞—Ä–æ–ª–∏ Wi‚ÄëFi (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã):</b>"]
    for p in profiles:
        pwd = network.get_wifi_password(p) or "<i>–ù–µ –Ω–∞–π–¥–µ–Ω / –∑–∞–∫—Ä—ã—Ç</i>"
        lines.append(f"‚Ä¢ <code>{html.escape(p)}</code>: <code>{html.escape(pwd)}</code>")
    await update.message.reply_html("\n".join(lines))


def build_application(token: str) -> Application:
    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("network", network_command))
    app.add_handler(CommandHandler("wifiprofiles", wifiprofiles_command))
    app.add_handler(CommandHandler("wifipass", wifipass_command))
    app.add_handler(CommandHandler("wifipass_all", wifipass_all_command))

    # Table conversation
    NAME, ADDRESS, PASSWORD, NOTE = range(4)


    async def fill_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_html("<b>–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ç–∏ (SSID) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
        return NAME


    async def fill_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip() if update.message and update.message.text else ""
        context.user_data['name'] = text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        await update.message.reply_html("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (IP) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
        return ADDRESS


    async def fill_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip() if update.message and update.message.text else ""
        context.user_data['address'] = text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        await update.message.reply_html("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip.")
        return PASSWORD


    async def fill_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip() if update.message and update.message.text else ""
        context.user_data['password'] = text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        await update.message.reply_html("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip.")
        return NOTE


    async def fill_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text.strip() if update.message and update.message.text else ""
        context.user_data['note'] = text or "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        storage.save_row(os.path.dirname(__file__), context.user_data)
        await update.message.reply_html("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return ConversationHandler.END


    async def skip_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if 'name' not in context.user_data:
            context.user_data['name'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            await update.message.reply_html("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (IP) –∏–ª–∏ /skip.")
            return ADDRESS
        if 'address' not in context.user_data:
            context.user_data['address'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            await update.message.reply_html("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ /skip.")
            return PASSWORD
        if 'password' not in context.user_data:
            context.user_data['password'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            await update.message.reply_html("–ü—Ä–æ–ø—É—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ /skip.")
            return NOTE
        context.user_data['note'] = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        storage.save_row(os.path.dirname(__file__), context.user_data)
        await update.message.reply_html("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
        return ConversationHandler.END


    async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_html("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END


    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('fill', fill_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fill_name), CommandHandler('skip', skip_field)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, fill_address), CommandHandler('skip', skip_field)],
            PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, fill_password), CommandHandler('skip', skip_field)],
            NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, fill_note), CommandHandler('skip', skip_field)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(conv_handler)


    async def showtable(update: Update, context: ContextTypes.DEFAULT_TYPE):
        rows = storage.load_table(os.path.dirname(__file__))
        if not rows:
            await update.message.reply_html("<i>–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.</i>")
            return
        lines = ["<b>–¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π:</b>"]
        for i, r in enumerate(rows, 1):
            lines.append(f"{i}. SSID: <code>{html.escape(r.get('name','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code> | IP: <code>{html.escape(r.get('address','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code> | –ü–∞—Ä–æ–ª—å: <code>{html.escape(r.get('password','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code> | –ü—Ä–∏–º: <code>{html.escape(r.get('note','–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'))}</code>")
        await Application.bot._send_message  # type: ignore
        await app.bot.send_message(chat_id=update.effective_chat.id, text="\n".join(lines), parse_mode="HTML")

    app.add_handler(CommandHandler('showtable', showtable))

    return app
